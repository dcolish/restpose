Schema
======

The search and indexing is controlled by a search schema.  An example schema
can be found in examples/schema.json.

The schema is a JSON file (with the extension that C-style comments are
permitted in it).  The current schema format is stored in a `schema_format`
property: this is to allow upgrades to the schema format to be performed in
future.

The list of known fields is stored in the `fields` property.  This maps from a
fieldname to a set of properties for that field.  All fields have a `type`
property, which defines what kind of processing to do to the field.  They also
have a `store_field` parameter, which specifies the fieldname to store values
seen in that field in (for display with search results).  This will normally be
either empty if the values shouldn't be stored, or the fieldname for the field.

The other properties which are valid vary according to the type.  There are
several different types:

ID fields
---------

ID fields expect a single byte string as input.

There should only be one ID field in a schema.  This field is used to generate
a unique ID for the documents; if a new document is added with the same ID, the
old document with that ID will be replaced.

ID fields have a `max_length` parameter, which specifies the maximum length for
a field value to be stored.  This defaults to 64.  With current Xapian backends
there is a limit on term length - to avoid any possible problems, it shouldn't
be raised above 120 (though you can get away with larger values in many cases).
It's probably unwise to have very long IDs anyway.

ID fields also have a `too_long_action` parameter, which specifies an action to
take if the field value exceeds the length specified by `max_length`.  This can
be one of:

 - `error`: Raise an error if the field value exceeds the maximum length.

 - `hash`: Replace the end of the field value with a hash of the end of the
   field value, to bring the length into compliance with `max_length`.  Note
   that if `max_length` is very low (a few bytes), the hashed length might
   still exceed it.

 - `truncate`: Truncate the field value to the `max_length` value.

Exact fields
------------

Exact fields expect a single byte string, or a single integer, as input.

If an integer is supplied (either when indexing or searching), it is converted
to a decimal representation of the integer (as long as the integer is positive,
and requires no more than 64 bits to represent it).

These store an exact string supplied as input.  They have `max_length` and
`too_long_action` properties which are the same as those for ID fields.  They
also have a `prefix` parameter which is used to distinguish the terms generated
by these fields from other fields.  The `prefix` parameter may not be empty.

Text fields
-----------

Text fields expect a UTF-8 encoded string as input.

They have a `prefix` parameter used to stinguish the terms generated by these
fields from other fields.  The `prefix` parameter may not be empty.

Currently, prefix of "t" has special meaning: the "text" parameter of a search
will search through all text fields using the "t" prefix.

Date fields
-----------

Date fields expect an integer number of seconds since the Unix epoch (1970).

They have one additional parameter: the "slot" parameter, which is an unsigned
integer value.  Each distinct date that should be searchable should be given a
distinct value for the "slot" parameter.

Stored fields
-------------

Stored fields do nothing except store their input value for display.  They have
no additional parameters.

